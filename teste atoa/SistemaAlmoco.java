package teste_atoa;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Sistema de Gerenciamento de Almo√ßo
 * Aplica√ß√£o para gerenciar esfomeados e suas prefer√™ncias de almo√ßo
 */
public class SistemaAlmoco {
    
    private static List<String> esfomeados = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        inicializarSistema();
        exibirMenu();
    }
    
    /**
     * Inicializa o sistema com dados b√°sicos
     */
    private static void inicializarSistema() {
        System.out.println("=== SISTEMA DE GERENCIAMENTO DE ALMO√áO ===");
        System.out.println("Pelo amor de Deus, chega logo almo√ßo! üçΩÔ∏è");
        System.out.println();
        
        // Inicializa lista de esfomeados
        esfomeados.add("Igor");
        esfomeados.add("Matheus");
        esfomeados.add("Pedro");
        esfomeados.add("Garrafinha perdida");
        
        System.out.println("Pessoas registradas como esfomeadas:");
        for (int i = 0; i < esfomeados.size(); i++) {
            System.out.println((i + 1) + ". " + esfomeados.get(i));
        }
        System.out.println();
    }
    
    /**
     * Exibe o menu principal e processa as op√ß√µes
     */
    private static void exibirMenu() {
        boolean continuar = true;
        
        while (continuar) {
            System.out.println("=== MENU PRINCIPAL ===");
            System.out.println("1. Definir objetivo do almo√ßo");
            System.out.println("2. Adicionar nova pessoa esfomeada");
            System.out.println("3. Remover pessoa da lista");
            System.out.println("4. Listar todas as pessoas esfomeadas");
            System.out.println("5. Verificar status da fome");
            System.out.println("6. Sair");
            System.out.print("Escolha uma op√ß√£o (1-6): ");
            
            int opcao = lerInteiro();
            
            switch (opcao) {
                case 1:
                    definirObjetivoAlmoco();
                    break;
                case 2:
                    adicionarPessoa();
                    break;
                case 3:
                    removerPessoa();
                    break;
                case 4:
                    listarEsfomeados();
                    break;
                case 5:
                    verificarStatusFome();
                    break;
                case 6:
                    System.out.println("Saindo do sistema... Bom almo√ßo! üçΩÔ∏è");
                    continuar = false;
                    break;
                default:
                    System.out.println("Op√ß√£o inv√°lida! Tente novamente.");
            }
            
            if (continuar) {
                System.out.println("\nPressione Enter para continuar...");
                scanner.nextLine();
                limparTela();
            }
        }
        
        scanner.close();
    }
    
    /**
     * Define o objetivo do almo√ßo
     */
    private static void definirObjetivoAlmoco() {
        System.out.println("\n=== DEFINIR OBJETIVO DO ALMO√áO ===");
        System.out.println("Qual seu objetivo hoje?");
        System.out.println("1. S√≥ provar (diet mode)");
        System.out.println("2. Hoje vou s√≥ sentir o cheiro de perto (extreme diet)");
        System.out.println("3. Hoje vou s√≥ comprimentar a cozinheira (social mode)");
        System.out.println("4. Vou devorar tudo que ver pela frente (beast mode)");
        System.out.print("Escolha sua op√ß√£o (1-4): ");
        
        int objetivo = lerInteiro();
        
        switch (objetivo) {
            case 1:
                System.out.println("‚úÖ Hoje o objetivo √© s√≥ provar - Mode Diet ativado!");
                System.out.println("Dica: Mastigue bem e saboreie cada garfada.");
                break;
            case 2:
                System.out.println("‚úÖ Hoje vou s√≥ sentir o cheiro - Mode Extreme Diet ativado!");
                System.out.println("Dica: O cheiro j√° alimenta a alma... quase.");
                break;
            case 3:
                System.out.println("‚úÖ Hoje vou s√≥ comprimentar a cozinheira - Mode Social ativado!");
                System.out.println("Dica: Um sorriso e um elogio fazem milagres!");
                break;
            case 4:
                System.out.println("‚úÖ Vou devorar tudo - Mode Beast ativado!");
                System.out.println("Dica: Prepare o est√¥mago para a batalha √©pica!");
                break;
            default:
                System.out.println("‚ùå Op√ß√£o inv√°lida! Parece que a fome est√° afetando sua capacidade de escolha.");
        }
    }
    
    /**
     * Adiciona uma nova pessoa √† lista de esfomeados
     */
    private static void adicionarPessoa() {
        System.out.println("\n=== ADICIONAR NOVA PESSOA ===");
        System.out.print("Digite o nome da pessoa esfomeada: ");
        scanner.nextLine(); // Limpa o buffer
        String nome = scanner.nextLine();
        
        if (!nome.trim().isEmpty()) {
            if (!esfomeados.contains(nome)) {
                esfomeados.add(nome);
                System.out.println("‚úÖ " + nome + " foi adicionado(a) √† lista de esfomeados!");
            } else {
                System.out.println("‚ö†Ô∏è " + nome + " j√° est√° na lista!");
            }
        } else {
            System.out.println("‚ùå Nome inv√°lido!");
        }
    }
    
    /**
     * Remove uma pessoa da lista de esfomeados
     */
    private static void removerPessoa() {
        if (esfomeados.isEmpty()) {
            System.out.println("‚ùå N√£o h√° pessoas na lista para remover!");
            return;
        }
        
        System.out.println("\n=== REMOVER PESSOA ===");
        System.out.println("Lista atual:");
        for (int i = 0; i < esfomeados.size(); i++) {
            System.out.println((i + 1) + ". " + esfomeados.get(i));
        }
        
        System.out.print("Digite o n√∫mero da pessoa para remover (1-" + esfomeados.size() + "): ");
        int indice = lerInteiro() - 1;
        
        if (indice >= 0 && indice < esfomeados.size()) {
            String removido = esfomeados.remove(indice);
            System.out.println("‚úÖ " + removido + " foi removido(a) da lista!");
            System.out.println("Esperamos que tenha encontrado comida! üçΩÔ∏è");
        } else {
            System.out.println("‚ùå N√∫mero inv√°lido!");
        }
    }
    
    /**
     * Lista todas as pessoas esfomeadas
     */
    private static void listarEsfomeados() {
        System.out.println("\n=== LISTA DE ESFOMEADOS ===");
        if (esfomeados.isEmpty()) {
            System.out.println("üéâ Ningu√©m est√° com fome! Todos j√° almo√ßaram!");
        } else {
            System.out.println("Total de esfomeados: " + esfomeados.size());
            for (int i = 0; i < esfomeados.size(); i++) {
                System.out.println((i + 1) + ". " + esfomeados.get(i) + " üçΩÔ∏è");
            }
        }
    }
    
    /**
     * Verifica o status geral da fome
     */
    private static void verificarStatusFome() {
        System.out.println("\n=== STATUS DA FOME ===");
        
        if (esfomeados.isEmpty()) {
            System.out.println("üéâ Status: TODOS ALIMENTADOS!");
            System.out.println("Parab√©ns! Ningu√©m est√° com fome no momento.");
        } else {
            System.out.println("‚ö†Ô∏è Status: EMERG√äNCIA ALIMENTAR!");
            System.out.println("N√∫mero de esfomeados: " + esfomeados.size());
            System.out.println("N√≠vel de urg√™ncia: " + calcularNivelUrgencia());
            System.out.println("Recomenda√ß√£o: " + gerarRecomendacao());
        }
    }
    
    /**
     * Calcula o n√≠vel de urg√™ncia baseado no n√∫mero de esfomeados
     */
    private static String calcularNivelUrgencia() {
        int total = esfomeados.size();
        if (total <= 1) return "BAIXO üü¢";
        else if (total <= 3) return "M√âDIO üü°";
        else if (total <= 5) return "ALTO üü†";
        else return "CR√çTICO üî¥";
    }
    
    /**
     * Gera recomenda√ß√£o baseada no n√∫mero de esfomeados
     */
    private static String gerarRecomendacao() {
        int total = esfomeados.size();
        if (total <= 1) return "Relaxa, √© s√≥ uma pessoa. D√° pra aguentar mais um pouco.";
        else if (total <= 3) return "Hora de pensar seriamente no almo√ßo.";
        else if (total <= 5) return "ALERTA! Providenciem comida urgentemente!";
        else return "EVACUEM O PR√âDIO! A fome est√° fora de controle!";
    }
    
    /**
     * L√™ um n√∫mero inteiro do usu√°rio com tratamento de erro
     */
    private static int lerInteiro() {
        while (true) {
            try {
                int numero = Integer.parseInt(scanner.nextLine());
                return numero;
            } catch (NumberFormatException e) {
                System.out.print("‚ùå Por favor, digite um n√∫mero v√°lido: ");
            }
        }
    }
    
    /**
     * Simula a limpeza da tela
     */
    private static void limparTela() {
        for (int i = 0; i < 3; i++) {
            System.out.println();
        }
    }
}